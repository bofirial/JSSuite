using JS.Core.Foundation.BaseClasses;
using JS.Core.Foundation.Data;
using JS.Suite.DataAbstraction.JSSupport;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace JS.Suite.BusinessLogic.JSSupport.Generated

//************************
// GENERATED CLASS
// DO NOT EDIT THIS FILE
//************************
{
    /// <summary>
    /// Generated ApplicationLog Business Manager
    /// </summary>
    /// <typeparam name="TBusinessManager">The type of the business manager.</typeparam>
    public class ApplicationLogBusinessManager_Generated<TBusinessManager> : SingletonBase<TBusinessManager> where TBusinessManager : class
    {

        ///// <summary>
        ///// Select
        ///// </summary>
        ///// <param name="connectionInfo">The connection information.</param>
        ///// <param name="filter">The filter.</param>
        ///// <returns></returns>
        //public List<ApplicationLog> Select(IConnectionInfo connectionInfo, ApplicationLog filter)
        //{
        //    return ApplicationLogManager.Current.Select(connectionInfo, filter);
        //}

        /// <summary>
        /// Select Async
        /// </summary>
        /// <param name="connectionInfo">The connection information.</param>
        /// <param name="filter">The filter.</param>
        /// <returns></returns>
        public async Task<List<ApplicationLog>> SelectAsync(IConnectionInfo connectionInfo, ApplicationLog filter)
        {
            return await ApplicationLogManager.Current.SelectAsync(connectionInfo, filter);
        }

        ///// <summary>
        ///// Insert
        ///// </summary>
        ///// <param name="connectionInfo">The connection information.</param>
        ///// <param name="ApplicationLog">The entity.</param>
        ///// <returns></returns>
        //public IProcessResult Insert(IConnectionInfo connectionInfo, ApplicationLog entity)
        //{
        //    return ApplicationLogManager.Current.Insert(connectionInfo, entity);
        //}

        /// <summary>
        /// Insert Async
        /// </summary>
        /// <param name="connectionInfo">The connection information.</param>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public async Task<IProcessResult> InsertAsync(IConnectionInfo connectionInfo, ApplicationLog entity)
        {
            return await ApplicationLogManager.Current.InsertAsync(connectionInfo, entity);
        }

        ///// <summary>
        ///// Update
        ///// </summary>
        ///// <param name="connectionInfo">The connection information.</param>
        ///// <param name="ApplicationLog">The entity.</param>
        ///// <returns></returns>
        //public IProcessResult Update(IConnectionInfo connectionInfo, ApplicationLog entity)
        //{
        //    return ApplicationLogManager.Current.Update(connectionInfo, entity);
        //}

        /// <summary>
        /// Update Async
        /// </summary>
        /// <param name="connectionInfo">The connection information.</param>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public async Task<IProcessResult> UpdateAsync(IConnectionInfo connectionInfo, ApplicationLog entity)
        {
            return await ApplicationLogManager.Current.UpdateAsync(connectionInfo, entity);
        }

        ///// <summary>
        ///// Delete
        ///// </summary>
        ///// <param name="connectionInfo">The connection information.</param>
        ///// <param name="ApplicationLog">The entity.</param>
        ///// <returns></returns>
        //public IProcessResult Delete(IConnectionInfo connectionInfo, ApplicationLog entity)
        //{
        //    return ApplicationLogManager.Current.Delete(connectionInfo, entity);
        //}

        /// <summary>
        /// Delete Async
        /// </summary>
        /// <param name="connectionInfo">The connection information.</param>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public async Task<IProcessResult> DeleteAsync(IConnectionInfo connectionInfo, ApplicationLog entity)
        {
            return await ApplicationLogManager.Current.DeleteAsync(connectionInfo, entity);
        }
    }
}
